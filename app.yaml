name: Deploy Python app to EC2

on:
  push:
    branches:
      - main  # Trigger the workflow when changes are pushed to the "main" branch
    paths:
      - 'app/**'
jobs:
  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Set the Python version you want to use

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install dependencies from the requirements.txt file

      # Step 4: Run Safety to check for vulnerabilities in dependencies
      - name: Run Safety (CVE Scan)
        run: |
          pip install safety
          safety check -r requirements.txt --full-report > safety_report.txt || true  # --full-report for detailed output
        continue-on-error: true  # This allows the deployment to continue even if Safety finds vulnerabilities
        id: safety_scan

      # Step 5: Upload Safety scan report as artifact
      - name: Upload Safety scan report
        uses: actions/upload-artifact@v2
        with:
          name: safety-report
          path: safety_report.txt

      # Step 6: Run Bandit to check for Python code security issues
      - name: Run Bandit (Security Scan)
        run: |
          pip install bandit
          bandit -r . -o bandit_report.html || true  # -r to run recursively on the repo, -o for output format (HTML)
        continue-on-error: true  # This allows the deployment to continue even if Bandit finds issues
        id: bandit_scan

      # Step 7: Upload Bandit scan report as artifact
      - name: Upload Bandit scan report
        uses: actions/upload-artifact@v2
        with:
          name: bandit-report
          path: bandit_report.html

      # Step 8: Deploy to AWS EC2 (only if previous steps are successful)
      - name: Deploy to AWS EC2
        run: |
          # Save the AWS private key (GitHub Secret) into a .pem file
          echo "$AWS_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into EC2 and deploy the changes
          ssh -i private_key.pem ec2-user@$EC2_PUBLIC_IP << 'EOF'
            # Change directory to the app's folder
            cd /opt/myapp

            # Pull the latest code from GitHub
            git pull origin main

            # Create a virtual environment if it doesn't already exist
            python3 -m venv myapp  # Create the virtual environment
            
            # Activate the virtual environment
            source myapp/bin/activate

            # Install any new dependencies
            pip install -r requirements.txt

          EOF
        env:
          AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}  # Store your private key in GitHub Secrets
          EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}  # Store your EC2 instance IP in GitHub Secrets
yh