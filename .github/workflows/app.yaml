name: Secure Deployment via Bastion

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      bastion_ip:
        description: 'Bastion Public IP'
        required: true
        type: string
      ec2_ip:
        description: 'EC2 Private IP'
        required: true
        type: string

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout Code from GitHub
      - name: Checkout Code
        uses: actions/checkout@v2

      # 2. Set up Python environment and install dependencies
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./app/python/requirements.txt
          pip install bandit safety

      # 3. Run Bandit scan (Python code security scanner)
      - name: Run Bandit Scan
        run: |
          pip install bandit
          bandit -r ./app/python -f json -o app/python/bandit-report.json || exit 1

      # 4. Run Safety scan (Dependency vulnerability scanner)
      - name: Run Safety Scan
        run: |
          pip install safety
          safety check -r app/python/requirements.txt --policy-file app/python/.safety.yaml --output json > app/python/safety-report.json || exit 1

      # 5. Upload the reports for later review
      - name: Upload Bandit Report
        if: always()  # Always upload, even if workflow fails
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: ./app/python/bandit-report.json

      - name: Upload Safety Report
        if: always()  # Always upload, even if workflow fails
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: ./app/python/safety-report.json 

  deploy-app:
    needs: scan  # Ensure deploy only happens after the scan job
    if: success()  # Only run if the scan job succeeds
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout Code from GitHub
      - name: Checkout Code
        uses: actions/checkout@v2    
      # 6. Set up SSH key and establish SSH Tunnel
      - name: Set up SSH tunnel and deploy code
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          BASTION: ${{ inputs.bastion_ip }}
          HOST: ${{ inputs.ec2_ip }}
          USER: ${{ secrets.EC2_USER }}
          PORT: ${{ secrets.SSH_PORT }}
          TUNNEL: ${{ secrets.SSH_TUNNEL_PORT }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          
          # Establish the SSH tunnel from GitHub Actions to the target EC2 instance
          # This command forwards the local port ${TUNNEL} to the target EC2 instance's SSH (port 22)
          ssh -i private_key.pem -o StrictHostKeyChecking=no -tt -L ${TUNNEL}:${HOST}:${PORT} -p ${PORT} ${USER}@${BASTION} -N -f
      # 7. copy code and deploy 
      - name: Deploy app and start Gunicorn
        env:
          USER: ${{ secrets.EC2_USER }}
          TUNNEL: ${{ secrets.SSH_TUNNEL_PORT }}
          HOST: ${{ inputs.ec2_ip }}
        run: |
          rsync -avz -e "ssh -i private_key.pem -p ${TUNNEL} -o StrictHostKeyChecking=no" ./app/python/ ${USER}@localhost:/home/${USER}/my-app/
          
          # SSH into the EC2 instance and install dependencies and start Gunicorn
          ssh -i private_key.pem -p ${TUNNEL} -o StrictHostKeyChecking=no ${USER}@localhost << 'EOF'
            # Install dependencies
            cd /home/${USER}/my-app/
            sudo apt-get update -y && sudo apt-get upgrade -y
            sudo apt-get install python3-pip -y
            sudo apt-get install gunicorn -y
            sudo apt-get install python3-flask -y
            pip install -r requirements.txt
            # Start Gunicorn
            sudo nohup gunicorn -w 4 -b 0.0.0.0:80 app:app > gunicorn.log 2>&1 &
            echo "gunicorn log"
            sudo cat gunicorn.log
          EOF
          # 8. Clean-up tunnel
      - name: Cleanup SSH Tunnel
        if: always()  # Runs even if previous steps fail
        run: |
          # Kill tunnel process using port ${TUNNEL}
          pkill -f "ssh.*${TUNNEL}:.*${{ inputs.ec2_ip }}"
          echo "SSH tunnel terminated"