name: "Deploy App"
description: "Deploy the app and start Gunicorn"

inputs:
  log_file:
    required: true
    description: "log file name"

  logstash_ip:
    required: true
    description: "logstash ip"

  EC2_USER:
    description: 'EC2 User for SSH connection'
    required: true

  EC2_SSH_KEY:
    description: 'EC2 ssh key for SSH connection'
    required: true
 
  SSH_TUNNEL_PORT:
    description: 'SSH Tunnel Port'
    required: true
 
  LOGSTASH_PORT:
    description: 'Logstash Port'
    required: true
 
  APP_PORT:
    description: 'App Port'
    required: true
 
  AWS_ACCESS_KEY_ID:
    description: 'AWS Access Key ID'
    required: true
 
  AWS_SECRET_ACCESS_KEY:
    description: 'AWS Secret Access Key'
    required: true
 
  AWS_REGION:
    description: 'AWS Region'
    required: true
 
  DEVSECOPS_GPG_PASSPHRASE:
    description: 'GPG passphrase for encryption'
    required: true

  PRIVATE_KEY:
    description: 'Private key'
    required: true

  MAXIMIND_LICENSE_KEY:
    description: 'Maximind license key for geo-ip analytics'
    required: true
 

runs:
  using: "composite"
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Deploy app and start Gunicorn
      env:
        USER: ${{ inputs.EC2_USER }}
        TUNNEL: ${{ inputs.SSH_TUNNEL_PORT }}
        LOGSTASH_IP: ${{ inputs.logstash_ip }}
        LOGSTASH_PORT: ${{ inputs.LOGSTASH_PORT }}
        APP_PORT: ${{ inputs.APP_PORT }}
        PRIVATE_KEY: ${{ inputs.EC2_SSH_KEY }}
        MAXIMIND_LICENSE_KEY: ${{ inputs.MAXIMIND_LICENSE_KEY }}
        LOGS_SEPARATOR: "=================================================================================================================================================================================="
      run: |
        set -e
        echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem

        export USER="${USER}"
        export APP_PORT="${APP_PORT}"

        rsync -avz -e "ssh -i private_key.pem -p ${TUNNEL} -o StrictHostKeyChecking=no" ./app/python/ ${USER}@localhost:/home/${USER}/my-app/
        ssh -i private_key.pem -p ${TUNNEL} -o StrictHostKeyChecking=no ${USER}@localhost << EOF | tee ${{ inputs.log_file }}  

          set -euo pipefail  # Exit on error, undefined variables, or pipe failures

          echo "${LOGS_SEPARATOR}"
          echo "Installing dependencies"
          cd /home/${USER}/my-app/
          sudo apt-get update -y -y && sudo apt-get upgrade -y
          sudo apt-get install -y python3-pip
          pip install -r requirements.txt

          echo "${LOGS_SEPARATOR}"
          echo "Maximind geolocation db"
          wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=$MAXIMIND_LICENSE_KEY&suffix=tar.gz" -O GeoLite2-City.tar.gz
        
          tar -xvzf GeoLite2-City.tar.gz
          DB_DIR=\$(find . -type d -name 'GeoLite2-City_*' | head -n 1)
          cp "\$DB_DIR/GeoLite2-City.mmdb" ./GeoLite2-City.mmdb
          
          echo "${LOGS_SEPARATOR}"
          echo "Creating necessary log directories..."
          sudo mkdir -p logs
          sudo chown $USER:$USER logs

          echo "${LOGS_SEPARATOR}"
          echo "starting Gunicorn"
          nohup gunicorn -w 4 -b 127.0.0.1:${APP_PORT} app:app \
          > /home/$USER/my-app/logs/access.log 2> /home/$USER/my-app/logs/error.log &

          echo "${LOGS_SEPARATOR}"
          echo "Nginx Permissions"
          sudo chmod +x /home/${USER}
          sudo chmod +x /home/${USER}/my-app
          sudo chmod +x /home/${USER}/my-app/static

          echo "${LOGS_SEPARATOR}"
          echo "installing nginx for proxy."
          if ! systemctl list-units --type=service --all | grep -q nginx.service; then
            sudo apt-get update -y && sudo apt-get upgrade -y
            sudo apt-get install nginx -y
            sudo systemctl enable nginx 
          else 
            echo "Nginx is already installed"
          fi

          echo "${LOGS_SEPARATOR}"
          echo "Creating Nginx config for APP."
          if [ -f /etc/nginx/sites-available/default ]; then
            sudo rm /etc/nginx/sites-available/default
          fi

          if [ -f /etc/nginx/sites-enabled/default ]; then
            sudo rm /etc/nginx/sites-enabled/default
          fi

          sudo tee /etc/nginx/sites-available/default > /dev/null << 'NGINX'
          server {
            listen 80 default_server;
            server_name _;

            # Static files
            location /app/static/ {
              alias /home/${USER}/my-app/static/;
              expires 30d;
              access_log off;
            }

            # Reverse proxy for Flask app
            location /app/ {
              proxy_pass http://127.0.0.1:${APP_PORT}/;

              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
            }
          }
        NGINX

          echo "${LOGS_SEPARATOR}"
          echo "Enabling Nginx site."
          sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
          sudo nginx -t

          echo "${LOGS_SEPARATOR}"
          echo "starting nginx"
          sudo systemctl start nginx

          echo "${LOGS_SEPARATOR}"
          echo "install filebeat for logs."
          if ! systemctl list-units --type=service --all | grep -q filebeat.service; then
            wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
            sudo apt-get install apt-transport-https
            # Add Elastic 8.x APT repo
            echo "deb https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
            sudo apt-get update -y && sudo apt-get install filebeat 
            sudo systemctl enable filebeat
            sudo systemctl start filebeat
          else 
            echo "Filebeat is already installed"
          fi

          echo "${LOGS_SEPARATOR}"
          echo "Configuring Filebeat to read logs."
          sudo tee /etc/filebeat/filebeat.yml > /dev/null << 'FILEBEAT'
          filebeat.inputs:
            - type: log
              enabled: true
              paths:
                - /home/${USER}/my-app/logs/access.log
                - /home/${USER}/my-app/logs/error.log
              fields:
                app: my-flask-app
              fields_under_root: true
              parsers:
                - ndjson:
                    overwrite_keys: true
                    add_error_key: true

          output.logstash:
            hosts: ["http://${LOGSTASH_IP}:${LOGSTASH_PORT}"]
            ssl.enabled: false

        FILEBEAT

          echo "${LOGS_SEPARATOR}"
          echo "restarting filebeat"
          sudo systemctl restart filebeat

          echo "${LOGS_SEPARATOR}"
          sudo systemctl status filebeat
          sudo systemctl status nginx

        EOF
      shell: bash

    - name: Encrypt and upload logs to s3
      env:
        AWS_ACCESS_KEY_ID: ${{  inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{  inputs.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{  inputs.AWS_REGION }}
        GPG_PASSPHRASE: ${{  inputs.DEVSECOPS_GPG_PASSPHRASE }}
        LOGS_SEPARATOR: "=================================================================================================================================================================================="
      run: |

        echo "${LOGS_SEPARATOR}"
        echo "Encrypting and uploading the log file using the GPG passphrase"
        gpg --batch --yes --passphrase "${GPG_PASSPHRASE}" --symmetric --cipher-algo AES256 ${{ inputs.log_file }} 
        aws s3 cp ${{ inputs.log_file }}.gpg  s3://sedem-terra333-bucket/devsecops-jomacs/logs/${{ inputs.log_file }}.gpg
        
        rm ${{ inputs.log_file }} 
        rm ${{ inputs.log_file }}.gpg
      shell: bash

    - name: Cleanup SSH Tunnel
      env:
        TUNNEL: ${{ inputs.SSH_TUNNEL_PORT }}
      if: always() # Runs even if previous steps fail
      run: |
        # Kill tunnel process using port ${TUNNEL}
        pkill -f "ssh.*${TUNNEL}:.*${HOST}"
        rm -f private_key.pem
        echo "SSH tunnel terminated"
      shell: bash


































# name: Deploy App

# on:
#   workflow_call:  # Only callable by other workflows
#     inputs:
#       log_file:
#         required: true
#      
#       logstash_ip:
#         required: true

# jobs: 
#   deploy-app-only:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Deploy app and start Gunicorn
#         env:
#           USER: ${{  inputs.EC2_USER }}
#           TUNNEL: ${{  inputs.SSH_TUNNEL_PORT }}
#           LOGSTASH_IP: ${{ inputs.LOGSTASH_IP }}
#           LOGSTASH_PORT: ${{  inputs.LOGSTASH_PORT }}
#           APP_PORT: ${{  inputs.APP_PORT }}
#           LOGS_SEPARATOR: "========================================================================================================================================================================================================================================="
#         run: |
#           set -e
#           rsync -avz -e "ssh -i private_key.pem -p ${TUNNEL} -o StrictHostKeyChecking=no" ./app/python/ ${USER}@localhost:/home/${USER}/my-app/

#           ssh -i private_key.pem -p ${TUNNEL} -o StrictHostKeyChecking=no ${USER}@localhost << EOF | tee ${{ inputs.log_file }}  
#             export LOGSTASH_IP="${LOGSTASH_IP}"
#             export LOGSTASH_PORT="${LOGSTASH_PORT}"
#             export APP_PORT="${APP_PORT}"

#             echo "${LOGS_SEPARATOR}"
#             # Install dependencies
#             cd /home/${USER}/my-app/
#             sudo apt-get update -y -y && sudo apt-get upgrade -y
#             sudo apt-get install python3-pip -y
#             sudo apt-get install gunicorn -y
#             sudo apt-get install python3-flask -y
#             pip install -r requirements.txt
#             echo "Creating necessary log directories..."
#             sudo mkdir -p logs
#             sudo chown $USER:$USER logs
#             echo "starting Gunicorn"
#             nohup gunicorn -w 4 -b 127.0.0.1:${APP_PORT} app:app \
#             > /home/$USER/my-app/logs/access.log 2> /home/$USER/my-app/logs/error.log &

#             echo "${LOGS_SEPARATOR}"
#             echo "Nginx Permissions"
#             sudo chmod +x /home/${USER}
#             sudo chmod +x /home/${USER}/my-app
#             sudo chmod +x /home/${USER}/my-app/static

#             echo "${LOGS_SEPARATOR}"
#             echo "installing nginx for proxy."
#             if ! systemctl list-units --type=service --all | grep -q nginx.service; then
#               sudo apt-get update -y && sudo apt-get upgrade -y
#               sudo apt-get install nginx -y
#               sudo systemctl enable nginx 
#               sudo systemctl start nginx

#               echo "${LOGS_SEPARATOR}"
#               echo "Creating Nginx config for APP."
#               sudo rm /etc/nginx/sites-available/default
#               sudo rm /etc/nginx/sites-enabled/default
#               sudo tee /etc/nginx/sites-available/default > /dev/null << 'NGINX'
#               server {
#                 listen 80 default_server;
#                 server_name _;

#                 # Static files
#                 location /app/static/ {
#                   alias /home/ubuntu/my-app/static/;
#                   expires 30d;
#                   access_log off;
#                 }

#                 # Reverse proxy for Flask app
#                 location /app/ {
#                   proxy_pass http://127.0.0.1:5000/;

#                   proxy_set_header Host \$host;
#                   proxy_set_header X-Real-IP \$remote_addr;
#                   proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
#                   proxy_set_header X-Forwarded-Proto \$scheme;
#                 }
#               }
      
#           NGINX

#             echo "${LOGS_SEPARATOR}"
#             echo "Enabling Nginx site."
#             sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
#             sudo nginx -t
#             sudo systemctl restart nginx

#             else 
#               echo "Nginx is already installed"
#               sudo systemctl restart nginx
#             fi

#             echo "${LOGS_SEPARATOR}"
#             echo "install filebeat for logs."
#             if ! systemctl list-units --type=service --all | grep -q filebeat.service; then
#               wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
#               sudo apt-get install apt-transport-https
#               # Add Elastic 8.x APT repo
#               echo "deb https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
#               sudo apt-get update -y && sudo apt-get install filebeat 
#               sudo systemctl enable filebeat
#               sudo systemctl start filebeat

#               echo "${LOGS_SEPARATOR}"
#               echo "Configuring Filebeat to read logs."
#               sudo tee /etc/filebeat/filebeat.yml > /dev/null << FILEBEAT
#               filebeat.inputs:
#                 - type: log
#                   enabled: true
#                   paths:
#                     - /home/${USER}/my-app/logs/access.log
#                     - /home/${USER}/my-app/logs/error.log
#                   fields:
#                     app: my-flask-app
#                   fields_under_root: true

#               output.logstash:
#                 hosts: ["http://${LOGSTASH_IP}:${LOGSTASH_PORT}"] 
#           FILEBEAT

#               echo "${LOGS_SEPARATOR}"
#               echo "restarting filebeat"
#               sudo systemctl restart filebeat

#             else 
#               echo "Filebeat is already installed"
#               sudo systemctl restart filebeat
#             fi

#             echo "${LOGS_SEPARATOR}"
#             sudo systemctl status filebeat
#             sudo systemctl status nginx

#           EOF

#       - name: Encrypt and upload logs to s3
#         env:
#           AWS_ACCESS_KEY_ID: ${{  inputs.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{  inputs.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ${{  inputs.AWS_REGION }}
#           GPG_PASSPHRASE: ${{  inputs.DEVSECOPS_GPG_PASSPHRASE }}
#           LOGS_SEPARATOR: "========================================================================================================================================================================================================================================="
#         run: |

#           echo "${LOGS_SEPARATOR}"
#           echo "Encrypting and uploading the log file using the GPG passphrase stored in GitHub  inputs."
#           gpg --batch --yes --passphrase "${GPG_PASSPHRASE}" --symmetric --cipher-algo AES256 ${{ inputs.log_file }} 
#           aws s3 cp ${{ inputs.log_file }} s3://sedem-terra333-bucket/devsecops-jomacs/logs/${{ inputs.log_file }}.gpg 
          
#           rm ${{ inputs.log_file }} 
#           rm ${{ inputs.log_file }}.gpg

#         # 4. Clean-up tunnel
#       - name: Cleanup SSH Tunnel
#         if: always() # Runs even if previous steps fail
#         run: |
#           # Kill tunnel process using port ${TUNNEL}
#           pkill -f "ssh.*${TUNNEL}:.*${HOST}"
#           rm -f private_key.pem
#           echo "SSH tunnel terminated"