name: Secure Deployment via Bastion

on:
  workflow_dispatch:
    inputs:
      bastion_ip:
        description: 'Bastion Public IP'
        required: true
        type: string
      ec2_ip:
        description: 'EC2 Private IP'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Environment variables for SSH and EC2 configuration
      EC2: ${{ inputs.ec2_ip }}
      BASTION: ${{ inputs.bastion_ip }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      USER: ${{ secrets.EC2_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/private_key.pem
          chmod 600 ~/.ssh/private_key.pem
          ssh-keyscan ${{ inputs.bastion_ip }} >> ~/.ssh/known_hosts

      - name: Copy app/python code to EC2
        run: |
          # Direct copy using bastion as jump host
          scp -o "StrictHostKeyChecking=no" \
              -o "ProxyJump $USER@${{ inputs.bastion_ip }}:$SSH_PORT" \
              -i ~/.ssh/private_key.pem \
              -r ./app/python \
              $USER@${{ inputs.ec2_ip }}:/home/$USER/my-app/

      - name: Start application
        run: |
          ssh -J $USER@${{ inputs.bastion_ip }}:$SSH_PORT \
              -i ~/.ssh/private_key.pem \
              $USER@${{ inputs.ec2_ip }} \
              "cd /home/$USER/my-app/python && nohup gunicorn -w 4 -b 0.0.0.0:80 app:app > /dev/null 2>&1 &"

      - name: Clean up private key
        run: rm -f ~/.ssh/private_key.pem


# name: Secure Deployment via Bastion

# on:
#   workflow_dispatch:
#     inputs:
#       bastion_ip:
#         description: 'Bastion Public IP'
#         required: true
#         type: string
#       ec2_ip:
#         description: 'EC2 Private IP'
#         required: true
#         type: string

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     env:
#       # Environment variables for SSH and EC2 configuration
#       EC2: ${{ inputs.ec2_ip }}
#       BASTION: ${{ inputs.bastion_ip }}
#       EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
#       USER: ${{ secrets.EC2_USER }}
#       SSH_PORT: ${{ secrets.SSH_PORT }}

#     steps:
#       # 1. Checkout Code from GitHub
#       - name: Checkout Code
#         uses: actions/checkout@v2

#       # 2. Set up SSH key for Bastion Host
#       - name: Set up SSH key
#         run: |
#           echo "$EC2_SSH_KEY" > private_key.pem
#           chmod 600 private_key.pem

#       # 3. Copy app/python code to EC2 via Bastion Host
#       - name: Copy app/python code to EC2 via Bastion Host
#         run: |
#           # SSH into the Bastion Host and copy the app/python directory to the EC2 instance
#           ssh -i private_key.pem -o StrictHostKeyChecking=no -p $SSH_PORT $USER@$BASTION << 'EOF'
#             # Use SCP to copy the app/python directory from GitHub Actions runner to the EC2 instance
#             scp -i private_key.pem -r ./app/python $USER@$EC2:/home/$USER/my-app/python
#             # Run the app on the EC2 instance
#             ssh -i private_key.pem -p $SSH_PORT $USER@$EC2 << 'INNER_EOF'
#               cd /home/$USER/my-app/python
#               gunicorn -w 4 -b 0.0.0.0:80 app:app &
#             INNER_EOF
#           EOF

#       # 4. Clean up private key
#       - name: Clean up private key
#         run: rm -f private_key.pem




























# name: Secure Deployment via Bastion
# env:
# #         EC2: ${{ inputs.ec2_ip }}
# #         BASTION: ${{ inputs.bastion_ip }}
# #         EC2_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
# #         USER: ${{ secrets.EC2_USER }}
# #         SSH_PORT: ${{ secrets.SSH_PORT }}

# on:
#   workflow_dispatch:
#     inputs:
#       bastion_ip:
#         description: 'Bastion Public IP'
#         required: true
#         type: string
#       ec2_ip:
#         description: 'EC2 Private IP'
#         required: true
#         type: string
# jobs:
#   deploy:
#     runs-on: $USER-latest
#     steps:
#       # 1. Checkout Code from GitHub
#       - name: Checkout Code
#         uses: actions/checkout@v2

#       # 2. Set up SSH key for Bastion Host
#       - name: Set up SSH key
#         run: |
#           echo "$EC2_EC2_EC2_SSH_KEY" > private_key.pem
#           chmod 600 private_key.pem

#       # 3. Copy app/python code to EC2 via Bastion Host
#       - name: Copy app/python code to EC2 via Bastion Host
#         run: |
#           # SSH into the Bastion Host and copy the app/python directory to the EC2 instance
#           ssh -i private_key.pem -o StrictHostKeyChecking=no -p 8008 $USER@$BASTION_PUBLIC_IP << 'EOF'
#             # Use SCP to copy the app/python directory from GitHub Actions runner to the EC2 instance
#             scp -i private_key.pem -r ./app/python $USER@$EC2_PRIVATE_IP:/home/$USER/my-app/python
#             # Run the app on the EC2 instance
#             ssh -i private_key.pem -p 8008 $USER@$EC2_PRIVATE_IP << 'INNER_EOF'
#               cd /home/$USER/my-app/python
#               gunicorn -w 4 -b 0.0.0.0:80 app:app &
#             INNER_EOF
#           EOF

#       # 4. Clean up private key
#       - name: Clean up private key
#         run: rm -f private_key.pem


        





















#     runs-on: $USER-latest
#     steps:
#     - uses: actions/checkout@v2
    
#     - name: Deploy to EC2
#       env:
#         EC2: ${{ inputs.ec2_ip }}
#         BASTION: ${{ inputs.bastion_ip }}
#         EC2_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
#         USER: ${{ secrets.EC2_USER }}
#         SSH_PORT: ${{ secrets.SSH_PORT }}
#       run: |
#         echo "$EC2_PRIVATE_KEY" > github-ec2.pem
#         chmod 600 github-ec2.pem
        
#         # SSH into Bastion Host and execute commands
#         ssh -o StrictHostKeyChecking=no -i github-ec2.pem -p ${SSH_PORT} ${USER}@${BASTION} << 'EOF'
#           echo "Current directory: $(pwd)"
#           echo "Listing home directory:"
#           ls -la ~
#         EOF


# jobs:
#   deploy:
#     runs-on: $USER-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4

#       - name: Copy Files via Bastion
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ inputs.ec2_ip }}       # Use private IP directly
#           username: $USER
#           key: ${{ secrets.EC2_SSH_KEY }}
#           port: 8008
#           source: "app/python/"
#           target: "/home/$USER/my-app/"
#           proxy_host: ${{ inputs.bastion_ip }}  # Bastion IP
#           proxy_port: 8008
#           proxy_username: $USER
#           proxy_key: ${{ secrets.EC2_SSH_KEY }}     # Same key for bastion

#       - name: Start Application
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ inputs.ec2_ip }}
#           username: $USER
#           key: ${{ secrets.EC2_SSH_KEY }}
#           port: 8008
#           proxy_host: ${{ inputs.bastion_ip }}
#           proxy_port: 8008
#           proxy_username: $USER
#           proxy_key: ${{ secrets.EC2_SSH_KEY }}
#           script: |
#             cd /home/$USER/my-app/python
#             nohup gunicorn -w 4 -b 0.0.0.0:80 app:app > /dev/null 2>&1 &

  #jobs:
#   deploy:
#     runs-on: $USER-latest
#     steps:
#       # 1. Checkout Code from GitHub
#       - name: Checkout Code
#         uses: actions/checkout@v2

#       # 2. Set up SSH key for Bastion Host
#       - name: Set up SSH key
#         run: |
#           echo "$EC2_EC2_EC2_SSH_KEY" > private_key.pem
#           chmod 600 private_key.pem

#       # 3. Copy app/python code to EC2 via Bastion Host
#       - name: Copy app/python code to EC2 via Bastion Host
#         run: |
#           # SSH into the Bastion Host and copy the app/python directory to the EC2 instance
#           ssh -i private_key.pem -o StrictHostKeyChecking=no -p 8008 $USER@$BASTION_PUBLIC_IP << 'EOF'
#             # Use SCP to copy the app/python directory from GitHub Actions runner to the EC2 instance
#             scp -i private_key.pem -r ./app/python $USER@$EC2_PRIVATE_IP:/home/$USER/my-app/python
#             # Run the app on the EC2 instance
#             ssh -i private_key.pem -p 8008 $USER@$EC2_PRIVATE_IP << 'INNER_EOF'
#               cd /home/$USER/my-app/python
#               gunicorn -w 4 -b 0.0.0.0:80 app:app &
#             INNER_EOF
#           EOF

#       # 4. Clean up private key
#       - name: Clean up private key
#         run: rm -f private_key.pem


        
