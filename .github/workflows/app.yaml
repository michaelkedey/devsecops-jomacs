name: Deploy Python app to EC2

on:
  workflow_dispatch:  # Manually trigger the workflow
    inputs:
      instance_id:
        description: 'EC2 Instance ID'
        required: true
        type: string
      environment:
        description: 'Deployment environment (dev, prod)'
        required: true
        default: 'prod'

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the job

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Set the Python version you want to use

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install dependencies from the requirements.txt file

      # Step 4: Run Safety to check for vulnerabilities in dependencies
      - name: Run Safety (CVE Scan)
        run: |
          pip install safety
          safety check -r requirements.txt --full-report > safety_report.txt || true  # --full-report for detailed output
        continue-on-error: true  # This allows the deployment to continue even if Safety finds vulnerabilities
        id: safety_scan

      # Step 5: Upload Safety scan report as artifact
      - name: Upload Safety scan report
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: safety_report.txt

      # Step 6: Run Bandit to check for Python code security issues
      - name: Run Bandit (Security Scan)
        run: |
          pip install bandit
          bandit -r . -o bandit_report.html || true  # -r to run recursively on the repo, -o for output format (HTML)
        continue-on-error: true  # This allows the deployment to continue even if Bandit finds issues
        id: bandit_scan

      # Step 7: Upload Bandit scan report as artifact
      - name: Upload Bandit scan report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit_report.html

      # Step 8: Deploy to AWS EC2 using AWS Systems Manager (SSM)
      - name: Deploy to EC2 via SSM
        uses: aws-actions/aws-ssm-run-command@v1
        with:
          document-name: "AWS-RunShellScript"
          targets: "Key=instanceIds,Values=${{ github.event.inputs.instance_id }}"
          parameters: |
            commands:
              - cd /opt/myapp || exit 1
              - git pull origin main || exit 1
              - python3 -m venv myapp || exit 1
              - source myapp/bin/activate || exit 1
              - pip install -r requirements.txt || exit 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Store your AWS Access Key in GitHub Secrets
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Store your AWS Secret Key in GitHub Secrets
          AWS_REGION: 'us-east-1'  # Specify the AWS region where the EC2 instance is located
