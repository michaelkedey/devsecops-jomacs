name: Secure ELK Deployment via Bastion

on:
  workflow_dispatch:
    inputs:
      bastion_ip:
        description: 'Bastion Public IP'
        required: true
        type: string
      elk_ip:
        description: 'ELK Private IP'
        required: true
        type: string

jobs:
  deploy-elk:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout Code from GitHub
      - name: Checkout Code
        uses: actions/checkout@v4    
      # 6. Set up SSH key and establish SSH Tunnel
      - name: Set up SSH tunnel and deploy code
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          BASTION: ${{ inputs.bastion_ip }}
          ELK: ${{ inputs.elk_ip }}
          USER: ${{ secrets.EC2_USER }}
          PORT: ${{ secrets.SSH_PORT }}
          TUNNEL: ${{ secrets.SSH_TUNNEL_PORT }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          
          # Establish the SSH tunnel from GitHub Actions to the target EC2 instance
          # This command forwards the local port ${TUNNEL} to the target EC2 instance's SSH (port 22)
          ssh -i private_key.pem -o StrictHostKeyChecking=no -tt -L ${TUNNEL}:${ELK}:${PORT} -p ${PORT} ${USER}@${BASTION} -N -f
      # 7. deploy elk
      - name: Deploy and start elk stack
        env:
          USER: ${{ secrets.EC2_USER }}
          TUNNEL: ${{ secrets.SSH_TUNNEL_PORT }}
          PASSWORD: ${{ secrets.KIBANA_PASSWORD }}
          ELK: ${{ inputs.elk_ip }}
        run: |
          # SSH into the EC2 instance and install elk and start it
          ssh -i private_key.pem -p ${TUNNEL} -o StrictHostKeyChecking=no ${USER}@localhost << 'EOF'
            # Update package index
            sudo apt-get update -y -y && sudo apt-get upgrade -y

            # Install Java (required by Elasticsearch)
            sudo apt-get install -y openjdk-11-jdk

            if ! systemctl list-units --type=service --all | grep -q elasticsearch.service; then
              echo "Installing Elasticsearch..."
              # Download and install the public signing key
              wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
              sudo apt-get install apt-transport-https
              echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
              sudo apt-get update -y && sudo apt-get install elasticsearch
              sudo /bin/systemctl daemon-reload
              sudo /bin/systemctl enable elasticsearch.service
              echo "waiting for elasticsearch to fully install before starting it"
              sleep 90 
              sudo systemctl start elasticsearch.service
              sleep 30
            else
              echo "Elasticsearch already installed."
              sudo systemctl restart elasticsearch
            fi

            echo "Getting enrollment token..."
            TOKEN=$(sudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana)

            # Export the token to use later
            export ENROLLMENT_TOKEN="$TOKEN"

            # Install Kibana
            if ! systemctl list-units --type=service --all | grep -q kibana.service; then
              echo "Installing Kibana..."
              sudo apt-get update -y && sudo apt-get install kibana

              # Configure Kibana to listen on all interfaces
              sudo sed -i "s|^#\?server.host:.*|server.host: \"0.0.0.0\"|" /etc/kibana/kibana.yml

              # Add basePath configs and set elasticsearch address (if needed)
              echo 'server.basePath: "/elk"' | sudo tee -a /etc/kibana/kibana.yml
              echo 'server.rewriteBasePath: true' | sudo tee -a /etc/kibana/kibana.yml
              sudo sed -i "s|^#\?elasticsearch.hosts:.*|elasticsearch.hosts: [\"http://localhost:9200\"]|" /etc/kibana/kibana.yml

            else
              echo "Kibana already installed."
              sudo systemctl restart kibana
            fi

            # Step to configure Kibana with enrollment token
            echo "passing token ti kibana"
            sudo /usr/share/kibana/bin/kibana-setup --enrollment-token "$ENROLLMENT_TOKEN"
            sudo systemctl start kibana

            # Install Logstash
            if ! systemctl list-units --type=service --all | grep -q logstash.service; then
              echo "Installing Logstash..."
              sudo apt-get update -y && sudo apt-get install logstash
            else
              echo "Logstash already installed."
              sudo systemctl restart logstash
            fi

            # checks
            sudo systemctl status elasticsearch
            sudo systemctl status logstash
            sudo systemctl status kibana

          EOF

      # 8. Clean-up tunnel
      - name: Cleanup SSH Tunnel
        if: always()  # Runs even if previous steps fail
        run: |
          # Kill tunnel process using port ${TUNNEL}
          pkill -f "ssh.*${TUNNEL}:.*${{ inputs.ec2_ip }}"
          echo "SSH tunnel terminated"
